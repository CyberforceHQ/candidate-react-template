# A descriptive name for your workflow, which will appear in the GitHub Actions UI.
name: Run Secure Lab Tests

# This workflow will now ONLY run when triggered manually via the UI
on:
  workflow_dispatch:
    # We can define inputs that the API can send, but for now, we don't need any.
    inputs: {}

# This section defines the jobs that will be run. We only have one job named 'test'.
jobs:
  test:
    # Specifies the type of virtual machine to run the job on. 'ubuntu-latest' is a standard, clean Linux environment.
    runs-on: ubuntu-latest

    # This section contains the sequence of steps that make up the job.
    steps:
      # Step 1: Checkout the candidate's code.
      # 'uses: actions/checkout@v3' is a pre-built action that checks out the repository's code.
      - name: 1. Checkout Candidate Solution
        uses: actions/checkout@v4
        with:
          # We check it out into a subdirectory named 'solution' to match our test's import path.
          path: solution

      # Step 2: Checkout the private test suite.
      - name: 2. Checkout Private Tests
        uses: actions/checkout@v4
        with:
          # Specify the private repository to check out.
          # IMPORTANT: Replace 'YourGitHubUsername' with your actual GitHub username.
          repository: CyberforceHQ/secret-react-tests

          # This token is a secret we will create in Phase 3. It grants this workflow
          # permission to access your private repository.
          token: ${{ secrets.TESTS_REPO_TOKEN }}

          # Check out the private tests into a subdirectory named 'private-tests'.
          path: private-tests

      # Step 3: Set up the Node.js environment for the entire job.
      - name: 3. Setup Node.js Environment
        uses: actions/setup-node@v4
        with:
          # Specify the version of Node.js to use.
          node-version: "18"

      # Step 4: Install dependencies for the candidate's application.
      - name: 4. Install Candidate App Dependencies
        # 'run:' executes shell commands. We change directory into 'solution' and run npm install.
        run: cd solution && npm install

      # Step 5: Install dependencies for the private test suite.
      - name: 5. Install Test Suite Dependencies
        run: cd private-tests && npm install

      # Step 6: Run the tests.
      - name: 6. Run, Process, and Send Result
        env:
          REPO_NAME: ${{ github.repository }}
        run: |
          chmod +x private-tests/process-results.js

          FINAL_PAYLOAD=$(cd private-tests && npm test || true | ./process-results.js "$REPO_NAME")

          echo "--- FINAL PAYLOAD (Generated via direct pipe) ---"
          echo "$FINAL_PAYLOAD"
          echo "--------------------------------------------------"

          curl -X POST \
            -H "Content-Type: application/json" \
            -d "$FINAL_PAYLOAD" \
            https://3a66-125-63-120-158.ngrok-free.app/test-submission
